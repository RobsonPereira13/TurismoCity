package com.turismo.robso.turismocity1.conexao;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import com.turismo.robso.turismocity1.basicas.Usuario;import java.util.ArrayList;/** * Created by robso on 08/05/2018. */public class UsuarioDados extends SQLiteOpenHelper {    public static final String DATABASE_NAME = "TurismoCity1.db";    private static final int DATABASE_VERSION = 1;    public static final String USUARIO_TABELA_NOME = "usuario";    public static final String USUARIO_COLUNA_ID = "id";    public static final String USUARIO_COLUNA_NOME = "nome";    public static final String USUARIO_COLUNA_EMAIL = "email";    public static final String USUARIO_COLUNA_SENHA = "senha";    public static final String USUARIO_COLUNA_FOTO = "foto";    public static final String USUARIO_COLUNA_PONTUACAO = "pontuacao";    public static final String USUARIO_COLUNA_MENSAGEM  ="mensagem";    public UsuarioDados(Context context) {        super(context, DATABASE_NAME , null, DATABASE_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db) {        db.execSQL(                "CREATE TABLE " + USUARIO_TABELA_NOME +                        "(" + USUARIO_COLUNA_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +                        USUARIO_COLUNA_NOME + " TEXT, " +                        USUARIO_COLUNA_EMAIL + " TEXT, " +                        USUARIO_COLUNA_SENHA + " TEXT, " +                       USUARIO_COLUNA_FOTO + " BLOB,"+                        USUARIO_COLUNA_PONTUACAO + " FLOAT, " +                        USUARIO_COLUNA_MENSAGEM + " TEXT " +                        ");"        );    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        db.execSQL("DROP TABLE IF EXISTS " + USUARIO_TABELA_NOME);        onCreate(db);    }    public ArrayList<Usuario> select() {        ArrayList<Usuario> retorno = new ArrayList<>();        SQLiteDatabase db = this.getReadableDatabase();        Cursor res =  db.rawQuery( "SELECT * FROM " + USUARIO_TABELA_NOME, null );        if (res.moveToFirst()) {            do {                Usuario c = new Usuario();                c.id = res.getInt(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_ID));                c.nome = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_NOME));                c.email = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_EMAIL));                c.senha = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_SENHA));                c.foto = res.getBlob(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_FOTO));                c.pontuacao = res.getFloat(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_PONTUACAO));                c.mensagem = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_MENSAGEM));                retorno.add(c);            } while (res.moveToNext());        }        return retorno;    }    public Usuario getUsuario(int id) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor res =  db.rawQuery(String.format("SELECT * FROM %s WHERE %s = ? ", USUARIO_TABELA_NOME, USUARIO_COLUNA_ID), new String[]{Integer.toString(id)});        Usuario retorno = new Usuario();        if (res.moveToFirst()) {            do {                retorno.id = res.getInt(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_ID));                retorno.nome = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_NOME));                retorno.email = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_EMAIL));                retorno.senha = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_SENHA));                retorno.foto = res.getBlob(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_FOTO));                retorno.pontuacao = res.getFloat(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_PONTUACAO));                retorno.mensagem = res.getString(res.getColumnIndex(UsuarioDados.USUARIO_COLUNA_MENSAGEM));            } while (res.moveToNext());        }        return retorno;    }    public boolean insert(Usuario c) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues contentValues = new ContentValues();        contentValues.put(USUARIO_COLUNA_NOME, c.nome);        contentValues.put(USUARIO_COLUNA_EMAIL, c.email);        contentValues.put(USUARIO_COLUNA_SENHA, c.senha);        contentValues.put(USUARIO_COLUNA_FOTO, c.foto);        contentValues.put(USUARIO_COLUNA_PONTUACAO, c.pontuacao);        contentValues.put(USUARIO_COLUNA_MENSAGEM, c.mensagem);        db.insert(USUARIO_TABELA_NOME, null, contentValues);        return true;    }    public boolean update(Usuario c) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues contentValues = new ContentValues();        contentValues.put(USUARIO_COLUNA_NOME, c.nome);        contentValues.put(USUARIO_COLUNA_EMAIL, c.email);        contentValues.put(USUARIO_COLUNA_SENHA, c.senha);        contentValues.put(USUARIO_COLUNA_FOTO, c.foto);        db.update(USUARIO_TABELA_NOME, contentValues, USUARIO_COLUNA_ID + " = ? ", new String[] { Integer.toString(c.id)} );        return true;    }    public boolean updateAvaliacao(Usuario c){        SQLiteDatabase db = this.getWritableDatabase();        ContentValues contentValues = new ContentValues();        contentValues.put(USUARIO_COLUNA_PONTUACAO, c.pontuacao);        contentValues.put(USUARIO_COLUNA_MENSAGEM, c.mensagem);        db.update(USUARIO_TABELA_NOME, contentValues, USUARIO_COLUNA_ID + " = ? ", new String[] { Integer.toString(c.id)} );        return true;    }    public Integer delete(Usuario c) {        SQLiteDatabase db = this.getWritableDatabase();        return db.delete(USUARIO_TABELA_NOME,                USUARIO_COLUNA_ID + " = ? ",                new String[] { Integer.toString(c.id) });    }    public Integer deleteAllPerson() {        SQLiteDatabase db = this.getWritableDatabase();        return db.delete(USUARIO_TABELA_NOME,                USUARIO_COLUNA_ID + " > ? ",                new String[] { Integer.toString(0) });    }    //validate with database    public int authLogin(String user, String pass){        String[] selectionArgs = new String[] { user, pass };        try {            int i = 0;            SQLiteDatabase db = this.getWritableDatabase();            Cursor c = null;            c = db.rawQuery("SELECT * FROM "+USUARIO_TABELA_NOME+" WHERE "+USUARIO_COLUNA_EMAIL+" = ? AND "+USUARIO_COLUNA_SENHA+" = ?;",selectionArgs);            c.moveToFirst();            i = c.getCount();            c.close();            return i;        }catch (Exception e){            e.printStackTrace();        }        return 0;    }    //validate duplicate email    public int duplicateEmail(String email){        String[] selectArgs = new String[] {email};        try {            int i =0;            SQLiteDatabase db = this.getWritableDatabase();            Cursor c= null;            c = db.rawQuery("SELECT "+USUARIO_COLUNA_EMAIL+" FROM "+USUARIO_TABELA_NOME+" WHERE "+USUARIO_COLUNA_EMAIL+" = ? LIMIT 1;",selectArgs);            c.moveToFirst();            i = c.getCount();            c.close();            return i;        }catch (Exception e){            e.printStackTrace();        }        return 0;    }}